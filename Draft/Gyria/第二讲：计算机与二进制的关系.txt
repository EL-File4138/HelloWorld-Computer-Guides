第二讲：计算机与二进制的关系




导语：计算机这三个字一开始只是一个笼统的概念，泛指一切具有计算功能机器。
比如我国的算盘。和各种各样的各种各样的机械计算机。
20世纪之后，电学开始大发展，电子计算机就这样出现了。电子计算机也是计算机的一种，而且是最成功、应用最广泛的一种。
以至于提起计算机，人们都会想到电子计算机。
电子计算机俗称“电脑”，但好像只有在我们国家才这样说，原因可能是大家觉得它和大脑一样擅长计算，甚至在某些方面比大脑的工作更有效。
最早的时候，人们发明计算机的目的仅仅是用来进行数学计算，即使是几十年前，当世界上第一台电子计算机出现的时候，研制它的目的依然是进行数学计算，
这一点没有改变。说到这里，大家可能觉得这与现实情况不同，现代计算机功能太多了，既能上网又可 以写文章排版打印、听音乐、看电影、玩游戏……，
但所有这一切看不出与数学运算有什么必然联系
这种看法并不正确。在任何一台现代的计算机内部，数学运算仍是最重要的组成部分之一，而且是非常基础的组成部分






2.1如何用电来表示数字
要进行数学计算，首先要解决的问题是如何将参与计算的数送进计算机。在机械计算机的时代，人们一般是通过一些精心设计的零件移动到合适的位置来做到这一点。（像珠心算盘）
但对于现代电子计算机来说，情况则完全不同。它从里到外都是电气化的，用电来表示数字，用电进行计算。
通常，数学运算被构造成一个独立的部件，这个部件就像一个盒子，它从外面接收一些数，经过计算后，再把结果送出来。
制造一个包括所有数学运算功能的部件固然好，但是非常复杂，你现在肯定无法理解它的原理。
所以我们先制作一个小的、能完 成某个简单运算的部件。当这个部件制作完成后，根据需要再进行扩充。
看起来加法运算非常简单，那我们就从制造一个加法运算部件开始吧
鉴于所有的电器都被放在一个盒子里，所以一个加法运算部件看起来就像这样（图2.1） ps:图后面再上
因为加法运算需要一个加数和一个被加数，所以这个加数运算部件提供了a,b两个输入端，好让它知道要算的数是什么。
当这个加法 运算部件完成计算后，把结果从o端送出来。

要想把准备加起来的两个数通过a和b送到运算部件里，最自然的想法就是将不同的数表示成不同的电压。
这个想法太奇妙了！不是吗？如果我要计算20+15，我可以在a 端加20V电压而在b端加15V电压，当运算完成后，o端输出35V电压，这正是我们所要的结果

那么问题来了，这样的操作只能适用于很小的数值的运算
如果要计算99768332+112211，这意味着得产生9000多万伏的高压
并不说人类无法得到这样高的电压，事实上这很容易。
但这个运算部件未必能够承受住这样的高压而不被烧毁。

即使这样可行，那么制造这样一台运算部件真正无法逾越的困难是表示像11.00156这样的小数.
通常，一个电路只能工作在近似精确的状态，因为有很多不可预知的因素会产生干扰。
像温度变化、组成电路的零件出故障这样的情况也会出现，这些都能导致整个电路的状态产生一些微小的改变。
这意味 着当你计算20+15的时候，尽管从a,b送进去的是精确的20V和15V电压，从o端输出可能不正好是35V，可能高或低。
但总的说来这并不算是什么大事儿，因为我们知道自己计算的是整数，尽管不太准确，高一点低一点这个结果是我们可以接受的
不过麻烦在于，假如我们真的想得到一个精确的结果11.00156时，该怎么办呢？
将电压精确地调整到这个数值是非常麻烦的，而最要命的是这个运算部件根本无法保证它不会变化。
所以这个想法不具备可行性


经过一段时间的思考，前面的方案之所以行不通，是因为仅仅只用一根导线是不可能表示所有的数的。
同时发现，无论一个数有多大，它都是0，1，2， 3，4，5，6，7，8，9的不同组合。比如125是1，2，5的组合；93850是9，3，8，5，0的组合等等。
有了这个发现后，我们不再使用单独的一根导线，而是使用多根导线来表示一个数，其中每根导线
都对应着这个数中的一位，如图2.2所示
这个修改是成功的，在图2.2中，5根导线中的每一根分别代表着
93580这个数的一位，按从上到下的顺序，在具体应用的时候，根据这个数每一位的数值为各个导线分配相应的电压。
它最大的特点就是 不再使用令人畏惧的高电压，取而代之的是从0-9V的九种低电压。

到目前为止一切还好，遗憾的是没有说明它如何表示一个小数， 要表示一个小数，有多种办法可供选择。
最简单、最省事儿的办法就是把导线分成两组，分别代表整数部分和小数部分
图2.3 整数部分和小数部分的划分
划分的方法可以随意，如上图那样，把5根导线划分成3位整数部分和2位小数部分。
如果用9根导线，就可以划分7位整数部分和2位小数部分或6位整数部分和3位小数部分等等


模拟计算机就是按这种思路做成的，模拟计算机在1940年以前就有了，甚至被安装在潜艇上，用来计算发射鱼雷所需的方向和速度。
但模拟计算机实现起来很困难，完全可以采用更好的方法，而且只用很普通的材料就可手工实现








2.2古怪的2进制计数法
这一节讨论如何数数，比如图2.5中一共有几棵树？
肯定是12棵 图2.5上面这些树的个数可记做“12”
为什么要把这些树的个数记做“12”而不是其他的符号呢？
这是因为我们平时使用的这种记数方法叫做十进制记数法，十进制记数法只 有十个符号：0，1，2，3，4，5，6，7，8，9
可以表示任意的数，奥秘在于组合。
十进制有十个符号，9是最大的，当要表示更大的数，将9变成 0，然后向左进一位，记做10，这就是十进制计数法

那么二进制记数法是什么呢？在二进制记数法中，只有0，1两个符号，那么1+1怎么解决呢？
用“2”表示，行不通，因为二进制记数 法只有0和1，没有更多的符号，所以也是将1变成0，向左进位来表示的
尽管二进制记数法只有两个符号，也可以有无穷无尽的组合。





2.3 二进制数就是比特串 
十进制数有不同的数位，个位、十位、百位……，但在二进制里通常不需要这样细致的划分，因为二进制数一般都很长。
对于单个二进制数位，只有一个称为“比特”，每个比特具有两个可能的值：0或1 
最初二进制中的每一位在英语里被表示为Binary digit，意思 是“二进制数位”或“二进制数字”。
约翰·怀尔德·图基（John WilderTukey，美国著名数学家）想用一种更短小的名称以方便交谈和书写
于是就有了bit这个单词来表示比特，bit也可以缩写为b当这个词传入中国时，音译为“比特”





2.4 用开关表示二进制数字 
二进制只有0和1两个符号，这可以用开关来实现：
开关断开时，电流被切断，代表0；
开关接通时，电路中有电流通过，代表1，
因为在大多数情况下一个真正的二进制数不仅只是一个0或一个 1，
它可能包含了很多比特，是一连串的0，1，所以要表示一个真正的二进制数，
比如 101（也就是十进制数的5），就需要一排开关，每一个开关对应一个比特





图中的方框通常代表一个具有某种功能的电路，在这里它代表的是一个运算部件。
之所以这么做，是因为我们正在讨论的是如何用开关来表示数，这是我们当前关注的焦点。

这个运算部件的左边和下面各有5个开关，分别用于输入两个参与运算的二进制数，这意味着它们都是5比特的。
要表示一个二进制数，只需要接通或断开它们中的一个或多个，而比特越多，需要的电线和开关就越多，相应的运算部件能计算的数就越大

如果没有二进制，表示电就必须制作一大堆电路，为的是生成不同的电压，这就是二进制数在电的世界里受到欢迎的原因。
当运算结果出来之后怎样知道它是不是正确，是否是真正想要的呢？
解决方法出奇的简单，我们可以把小灯泡接在每一根输出的导线上，以此来显示这些输出的比特到底是0还是1
当某根导线上没有电时，与它相连的灯泡不亮，代表这一比特是0；当灯泡亮时，表明这一比特是1。
如果依次记下这些比特并将其换算成十进制，就能知道结果到底是几
看来二进制与电学还真是有不解之缘，好像二进制是专门为发明电子计算机而量身定做的。


但二进制和电子计算机之间本身毫无关联。二进制论的创建时间大约在1672-1676年，
发明者是德国人莱布尼茨，莱布尼茨是伟大的哲学家和数学家，他不但是数理逻辑的开创者，还是与牛顿齐名的数学家，他们两个人相互独立地创建了微积分。


2.5如何用二进制进行加法运算

二进制加法怎么做呢？
在做十进制加法时有两点：
（1）必须掌握加法口诀；
（2）考虑进位。
二进制加法这两点同样重要

十进制加法有一大堆口诀，因为十进制有0-9十个基本数字，加法口诀需要把它们都组合起来
相比之下，二进制加法的口诀比较简洁，因为二进制只有两个基本数字：0和1。
所口诀是0加0等于0； 0加1等于1； 1加0等于1； 1加1等于0，进1
知道了二进制加法的口诀后，让我们实际做一下110+11
如图3.2所示，和十进制加法一样，两个要加起来的数右对齐，然后从最右边的列开始计算
图3.2 二进制加法示意图



先是0加1，对应口诀“0加1等于1”，这一列的和是1 接着，1加1，对应口诀“1加1等于0，进1”所以这一列的结果是 0，同时向左边产生一个进位1
继续向左，这一列是1，还有一个进位，对应“1加1等于0，进
1”，这一列的结果又是0，而且也向左边产生一个进位1，左边除了1
个进位没有数字。所以最终的结果是1001















